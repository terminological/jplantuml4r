% Generated by r6-generator-maven-plugin: do not edit by hand

\name{JavaApi}

\alias{JavaApi}

\title{Jplantuml4r: R6 Java Wrapper Package}

\section{Usage}{
	\if{html}{\out{<div class="r">}}
	\preformatted{
 J = jplantuml4r::JavaApi$get(logLevel)
 	}
  \if{html}{\out{</div>}}
}

\arguments{
	\if{html}{\out{<div class="arguments">}}
	\item{logLevel}{optional - the slf4j log level as a string - one of OFF (most specific, no logging), 
	FATAL (most specific, little data), ERROR, WARN, INFO, DEBUG, 
	TRACE (least specific, a lot of data), ALL (least specific, all data)}
	\if{html}{\out{</div>}}
}

\description{
An R6 package wrapping java code in the org.github.io.github.terminological:jplantuml4r library. This library was generated by the r6-generator-maven-plugin.

Version: 0.0.0.9000

Generated: 2024-04-24T15:09:41.036203071
}

\author{\email{rob.challen@bristol.ac.uk}}

\examples{
## -----------------------------------
## Check library dependencies for jplantuml4r
## -----------------------------------
jplantuml4r::JavaApi$installDependencies()

## -----------------------------------
## Construct a jplantuml4r Java API instance
## -----------------------------------

J = jplantuml4r::JavaApi$get()
# or a more verbose configuration
# J = jplantuml4r::JavaApi$get("DEBUG")


## -----------------------------------
## Method `J$PlantUML$new(...)`
## -----------------------------------
\dontrun{
# no example given - appropriate parameter values must be provided:
J$PlantUML$new()
# or alternatively:
jplantuml4r::new()
}

## -----------------------------------
## Method `J$PlantUML$savePlantUml(...)`
## Aliased as `jplantuml4r::save_plant_uml(...)`
## -----------------------------------
\dontrun{
# no example given - appropriate parameter values must be provided:
J$PlantUML$savePlantUml(plantuml, outFile, format)
# or alternatively:
jplantuml4r::save_plant_uml(plantuml, outFile, format)
}

## -----------------------------------
## Method `J$PlantUML$supportedFormats(...)`
## Aliased as `jplantuml4r::supported_formats(...)`
## -----------------------------------
\dontrun{
# no example given - appropriate parameter values must be provided:
J$PlantUML$supportedFormats()
# or alternatively:
jplantuml4r::supported_formats()
}
}

\keyword{java api}

\section{Package initialisation and control}{
	\itemize{
		\item \href{#method-api-installDependencies}{\code{JavaApi$installDependencies()}}
		\item \href{#method-api-rebuildDependencies}{\code{JavaApi$rebuildDependencies()}}
		\item \href{#method-api-versionInformation}{\code{JavaApi$versionInformation()}}
		\item \href{#method-api-get}{\code{J = JavaApi$get(logLevel)}}
		\item \href{#method-api-changeLogLevel}{\code{J$changeLogLevel(logLevel)}}
		\item \href{#method-api-reconfigureLog}{\code{J$reconfigureLog(log4jproperties)}}
		\item \href{#method-api-printMessages}{\code{J$printMessages()}}
	}
}

\section{Package classes and static methods}{
	\if{html}{\out{<hr>}}
	\itemize{
		\item \href{#method-PlantUML-new}{\code{J$PlantUML$new()}}
		\item \href{#method-PlantUML-savePlantUml}{\code{J$PlantUML$savePlantUml(plantuml, outFile, format)}}
		\item \href{#method-PlantUML-supportedFormats}{\code{J$PlantUML$supportedFormats()}}
	}
}

\section{Package initialisation and control}{
	\if{html}{\out{<a id="method-api-installDependencies"></a>}}
	\subsection{Package method \code{JavaApi$installDependencies()}}{
		This package level method checks for, and installs any dependencies needed for the running of the package.
		It is called automatically on first package load and so in general does not need to be used directly.
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
jplantuml4r::JavaApi$installDependencies()
			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
nothing. called for side effects.
		}
	}
	
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-api-rebuildDependencies"></a>}}
	\subsection{Package method \code{JavaApi$rebuildDependencies()}}{
		This package level method removes existing dependencies and re-installs dependencies needed for the running of the package.
		It is called automatically on first package load and so in general does not need to be called.
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
jplantuml4r::JavaApi$rebuildDependencies()
			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
nothing. called for side effects.
		}
	}
	
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-api-versionInformation"></a>}}
	\subsection{Package method \code{JavaApi$versionInformation()}}{
		This package level method returns debugging version information for the package
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
jplantuml4r::JavaApi$versionInformation()
			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
A list containing a set of versioning information about this package.
		}
	}
	
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-api-get"></a>}}
	\subsection{Package method \code{JavaApi$get()}}{
		This is the main entry point for the package and the root of the Java API in this package. All classes defined in the package
		are made available as items under this root. The JavaApi object manages the communication between R and Java.
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = jplantuml4r::JavaApi$get()
# package classes and functions are nested under the `J` api object.
			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{logLevel}{ The desired verbosity of the package. One of "OFF", "FATAL", "ERROR", "WARN", "INFO", "DEBUG", "TRACE", "ALL".}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
A R6 jplantuml4r::JavaApi object containing the access point to the objects and functions defined in this package 
		}
	}
	
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-api-changeLogLevel"></a>}}
	\subsection{Api method \code{J$changeLogLevel(logLevel)}}{
		Once the package is initialised the log level can be changed to increase the level of messages from the api.
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = jplantuml4r::JavaApi$get()
J$changeLogLevel("DEBUG")
			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{logLevel}{ The desired verbosity of the package. One of "OFF", "FATAL", "ERROR", "WARN", "INFO", "DEBUG", "TRACE", "ALL".}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
nothing. used for side effects.
		}
	}
	
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-api-reconfigreLog"></a>}}
	\subsection{Api method \code{J$reconfigureLog(log4jproperties)}}{
		Experimental / Advanced use: Once the package is initialised the log configureation can be changed to log to 
		an external file for example.
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = jplantuml4r::JavaApi$get()
prp = fs::path(getwd(),"log4j.properties")
if (fs::file_exists(prp)) {
	J$changeLogLevel(prp)
}
			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{log4jproperties}{ a full path to a log4jproperies file}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
nothing. used for side effects.
		}
	}
	
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-api-printMessages"></a>}}
	\subsection{Api method \code{J$printMessages()}}{
		Experimental / Internal use: Messages from Java to R are queued and
		printed after each function call. It is unlikely that any will be not printed
		so in normal circumstances this function should do nothing.
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = jplantuml4r::JavaApi$get()
J$printMessages()
			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
nothing. used for side effects.
		}
	}
	
}


\section{Static methods and constructors}{
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-PlantUML-new"></a>}}
	
	\subsection{Method \code{PlantUML$new()}}{
		the default no-args constructor
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = jplantuml4r::JavaApi$get()
J$PlantUML$new()
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			R6 PlantUML object: 
		}
	}


	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-PlantUML-savePlantUml"></a>}}
	
	\subsection{Method \code{PlantUML$savePlantUml()}}{
		Render a plantuml file to a png file
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = jplantuml4r::JavaApi$get()
J$PlantUML$savePlantUml(plantuml, outFile, format)
# this method is also exposed as a package function:
jplantuml4r::save_plant_uml(plantuml, outFile, format)
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{plantuml a plantuml file as a character vector.}{ - (java expects a RCharacterVector)}
				\item{outFile the output filename - (defaulting to `tempfile()`)}{ - (java expects a RFile)}
				\item{format see supported_formats method - (defaulting to `'png'`)}{ - (java expects a RCharacter)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RFile: this java method returns the message that the object was created with
		}
	}


	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-PlantUML-supportedFormats"></a>}}
	
	\subsection{Method \code{PlantUML$supportedFormats()}}{
		Get the list of supported formats for plantuml
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = jplantuml4r::JavaApi$get()
J$PlantUML$supportedFormats()
# this method is also exposed as a package function:
jplantuml4r::supported_formats()
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RCharacterVector: a list of formats.
		}
	}



}